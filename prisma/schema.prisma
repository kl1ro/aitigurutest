generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url = env("DATABASE_URL")
}

model User {
	id Int @id @default(autoincrement())
	name String
	email String? @unique
	emailVerified DateTime?
	image String?
	hashedPassword String?
	role Role @default(Customer)
	company String?
	address String?
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	accounts Account[]
	orders Order[]
}

model Account {
	id Int @id @default(autoincrement())
	userId Int
	type String
	provider AccountProvider @default(google)
	providerAccountId String
	refreshToken String? 
	accessToken String?
	expiresAt Int?
	tokenType String? 
	scope String?
	idToken String?
	sessionState String?
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	@@unique([provider, providerAccountId])
}

enum AccountProvider {
	google
}

enum Role {
	Admin
	Customer
	Manager
	Designer
	Seller
	Executor
}

model Category {
	id Int @id @default(autoincrement())
	parentId Int?
	name String
	parent Category? @relation("category-to-category", fields: [parentId], references: [id], onDelete: Cascade)
	children Category[] @relation("category-to-category")
	products Product[]
}

model Product {
	id Int @id @default(autoincrement())
	categoryId Int?
	name String
	price Int
	category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
	orderItems OrderItem[]
}

model Order {
	id Int @id @default(autoincrement())
	name String
	address String
	email String?
	company String?
	userId Int
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	items OrderItem[]
}

model OrderItem {
	id Int @id @default(autoincrement())
	orderId Int
	productId Int?
	name String
	price Int
	amount Int @default(1)
	product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
	order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}